# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A1g2YZovppy_dxkrDqB7nAJeGGEY26Fs
"""

!git clone 'https://github.com/muxspace/facial_expressions'

import pandas as pd
import numpy as np
import cv2

details=pd.read_csv("/content/facial_expressions/data/legend.csv")
details

temp=details.values
temp[2]

emo=np.unique(details.emotion)
for i in range(len(emo)):
  emo[i]=emo[i].lower()
emo =list(set(emo))
emo

data={}
for row in temp:
  key=row[2].lower()
  if key in data:
    data[key].append(row[1])
  else:
    data[key]=[row[1]]

data.keys()

import os
os.mkdir('Master data')
os.mkdir('Master data/train')
os.mkdir('Master data/test')

for emot in emo:
  os.mkdir(os.path.join('Master data/train',emot))
  os.mkdir(os.path.join('Master data/test',emot))

from shutil import copyfile
split_size=0.8
for emotion, image in data.items():
  trainsize=int(split_size*len(image))
  train_images=image[:trainsize]
  test_images=image[trainsize:]
  for imag in train_images:
    source=os.path.join("/content/facial_expressions/images",imag)
    dest=os.path.join("/content/Master data/train",emotion,imag)
    copyfile(source,dest)
  for imag in test_images:
    source=os.path.join("/content/facial_expressions/images",imag)
    dest=os.path.join("/content/Master data/test",emotion,imag)
    copyfile(source,dest)

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from keras.callbacks import EarlyStopping
from keras.layers import MaxPool2D,Conv2D,Flatten,Dense
from keras.models import Sequential

from keras.backend import categorical_crossentropy
model=Sequential([Conv2D(16,(3,3),activation='relu',input_shape=(100,100,3)),MaxPool2D(2,2)
,Conv2D(32,(3,3),activation='relu'),MaxPool2D(2,2),
Conv2D(64,(3,3),activation='relu'),MaxPool2D(2,2),
Conv2D(128,(3,3),activation='relu'),MaxPool2D(2,2),
Conv2D(256,(3,3),activation='relu'),MaxPool2D(2,2),
#Conv2D(100,(3,3),activation='relu'),MaxPool2D(2,2),
Flatten(),
Dense(1700,activation='relu'),
Dense(8,activation='softmax')
])
model.compile(optimizer=Adam(learning_rate=0.001),loss='categorical_crossentropy',metrics=['acc'])
model.summary()

train_dir="/content/Master data/train"
test_dir="/content/Master data/test"
trainDataGen=ImageDataGenerator(rescale=1.0/255)
train_gen=trainDataGen.flow_from_directory(train_dir,class_mode='categorical',target_size=(100,100),batch_size=128)
testDataGen=ImageDataGenerator(rescale=1.0/255)
test_gen=testDataGen.flow_from_directory(test_dir,class_mode='categorical',target_size=(100,100),batch_size=128)

es=EarlyStopping(monitor='val_acc',patience=30,min_delta=.01)

history=model.fit_generator(train_gen,epochs=1000,verbose=1,callbacks=[es],validation_data=test_gen)

import matplotlib.pyplot as plt

history.history.keys()

plt.plot(history.history['loss'])
plt.plot(history.history['acc'])

plt.plot(history.history['val_loss'])
plt.plot(history.history['val_acc'])

model.save("emotion.h5")

img=cv2.imread('/content/Master data/train/disgust/Avinash_2.jpg')
img=cv2.resize(img,(100,100))
img=img.reshape(1,100,100,3)
res=model.predict(img)
key=list(data.keys())
key[np.argmax(res)]



img=cv2.imread('/content/Master data/train/disgust/Avinash_2.jpg')
from google.colab.patches import cv2_imshow
cv2_imshow(img)

img=cv2.resize(img,(100,100))
cv2_imshow(img)

img=img.reshape(1,100,100,3)



res



# import pickle
# with open('emotion.pkl','wb') as f1:
#   pickle.dump(model,f1)